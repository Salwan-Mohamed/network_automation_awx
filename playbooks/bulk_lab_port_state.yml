---
# Play 1: Resolve switch → lab → interface list
- name: Resolve switch & lab & interfaces
  hosts: localhost
  gather_facts: false
  vars_files:
    - vars/switch_mapping.yml            # switch_mapping: { switch: [rooms...] }
    - vars/lab_name_mapping.yml          # lab_name_mapping: { room: lab_key }
    - vars/lab_interfaces_mapping.yml    # lab_interfaces_mapping: { lab_key: [ports or ranges] }

  tasks:
    # 1) Find switch by room (case-insensitive)
    - name: Locate switch for given room
      set_fact:
        switch_name: "{{ item.key }}"
      loop: "{{ switch_mapping | dict2items }}"
      when:
        - room is defined
        - room | length > 0
        - (room | lower) in (item.value | map('lower') | list)

    - name: Fail if no switch matches the room
      fail:
        msg: "Room '{{ room }}' not found in vars/switch_mapping.yml"
      when: switch_name is not defined

    # 2) Build a case-insensitive map for room → lab
    - name: Build case-insensitive lab_name mapping
      set_fact:
        lab_name_mapping_ci: "{{ lab_name_mapping_ci | default({}) | combine({ (item.key | lower): item.value }) }}"
      loop: "{{ lab_name_mapping | dict2items }}"

    # Resolve lab name with exact, hyphen/underscore, then case-insensitive match
    - name: Resolve lab name from room
      set_fact:
        resolved_lab_name: >-
          {{
            lab_name_mapping.get(room)
            | default(lab_name_mapping.get(room | replace('-', '_')))
            | default(lab_name_mapping.get(room | replace('_', '-')))
            | default(lab_name_mapping_ci[room | lower] | default(omit))
          }}

    - name: Fail if lab name not found for this room
      fail:
        msg: "Room '{{ room }}' not mapped to a lab in vars/lab_name_mapping.yml"
      when: resolved_lab_name is not defined

    # 3) Resolve lab → interface tokens
    - name: Normalize lab key variants
      set_fact:
        _lab_key_1: "{{ resolved_lab_name }}"
        _lab_key_2: "{{ resolved_lab_name | replace('-', '_') }}"
        _lab_key_3: "{{ resolved_lab_name | replace('_', '-') }}"

    - name: Get lab interface tokens
      set_fact:
        lab_entry: >-
          {{
            lab_interfaces_mapping.get(_lab_key_1)
            | default(lab_interfaces_mapping.get(_lab_key_2))
            | default(lab_interfaces_mapping.get(_lab_key_3))
          }}

    - name: Fail if lab key not found in lab_interfaces_mapping
      fail:
        msg: "Lab '{{ resolved_lab_name }}' not found in vars/lab_interfaces_mapping.yml"
      when: lab_entry is not defined

    - name: Canonicalize tokens to list
      set_fact:
        lab_raw_list: "{{ [lab_entry] if (lab_entry is string) else lab_entry }}"

    - name: Init expanded list
      set_fact:
        interfaces_expanded: []

    # Expand:
    # - "2/4-2/6" → ["2/4","2/5","2/6"]
    # - "2/10 , 2/11" → ["2/10","2/11"]
    # - "2/7" → ["2/7"]
    - name: Expand tokens into a flat interface list
      set_fact:
        interfaces_expanded: >-
          {{
            (interfaces_expanded | default([])) + (
              (
                (item | string) is search(',')
              )
              |
              ternary(
                ((item | string).split(',') | map('trim') | list),
                (
                  ((item | string) is search('-'))
                  |
                  ternary(
                    (
                      range(
                        (((item.split('-')[0] | trim).rsplit('/',1)[1]) | int),
                        (((item.split('-')[1] | trim).rsplit('/',1)[1]) | int) + 1
                      )
                      | list
                    )
                    | map('string')
                    | map('regex_replace', '^(.*)$', ((item.split('-')[0] | trim).rsplit('/',1)[0]) ~ '/\\1')
                    | list
                  ,
                    [ (item | string) | trim ]
                  )
                )
              )
            )
          }}
      loop: "{{ lab_raw_list }}"

    - name: Deduplicate and clean blanks
      set_fact:
        lab_interfaces: "{{ interfaces_expanded | reject('equalto','') | unique | list }}"

    - name: Ensure we have interfaces
      fail:
        msg: "No interfaces parsed for lab '{{ resolved_lab_name }}'. Check vars/lab_interfaces_mapping.yml"
      when: lab_interfaces | length == 0

    # ✅ YAML-safe assert (block list + quoted expression)
    - name: Validate action (enable|disable)
      assert:
        that:
          - "action in ['enable', 'disable']"
        fail_msg: "Invalid action '{{ action }}'. Use 'enable' or 'disable'."

    # Hand off to Play 2
    - name: Add resolved switch as target host
      add_host:
        name: "{{ switch_name }}"
        groups: lab_switch
        lab_interfaces: "{{ lab_interfaces }}"
        lab_action: "{{ action }}"
        resolved_lab_name: "{{ resolved_lab_name }}"

# Play 2: Apply enable/disable on each interface of the resolved switch
- name: Apply bulk interface state on ArubaOS-Switch
  hosts: lab_switch
  gather_facts: false
  connection: network_cli
  vars:
    ansible_network_os: community.network.aruba
  collections:
    - community.network

  tasks:
    - name: Plan summary
      debug:
        msg:
          - "Switch: {{ inventory_hostname }}"
          - "Lab: {{ resolved_lab_name }}"
          - "Action: {{ lab_action }}"
          - "Interfaces: {{ lab_interfaces | join(', ') }}"

    - name: Apply {{ lab_action }} on each lab interface
      community.network.aruba_config:
        parents: "interface {{ item }}"
        lines:
          - "{{ lab_action }}"
      loop: "{{ lab_interfaces }}"

    - name: Save configuration
      community.network.aruba_command:
        commands:
          - "write memory"

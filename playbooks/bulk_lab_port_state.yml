---
# Play 1: Resolve switch → lab → interface list
- name: Resolve switch & lab & interfaces
  hosts: localhost
  gather_facts: false

  tasks:
    # --- Load switch_mapping.yml (with fallbacks so it's never undefined) ---
    - name: Load switch_mapping (vars/switch_mapping.yml)
      include_vars:
        file: vars/switch_mapping.yml
      register: _swvars1
      failed_when: false
      ignore_errors: true
      when: switch_mapping is not defined

    - name: Load switch_mapping (../vars/switch_mapping.yml)
      include_vars:
        file: ../vars/switch_mapping.yml
      register: _swvars2
      failed_when: false
      ignore_errors: true
      when: switch_mapping is not defined

    - name: Load switch_mapping (switch_mapping.yml at cwd)
      include_vars:
        file: switch_mapping.yml
      register: _swvars3
      failed_when: false
      ignore_errors: true
      when: switch_mapping is not defined

    - name: Fail if switch_mapping not loaded
      fail:
        msg: "Could not load 'switch_mapping'. Ensure vars/switch_mapping.yml (or ../vars/…, ./) defines 'switch_mapping: {...}'."
      when: switch_mapping is not defined

    # --- Load lab_name_mapping.yml ---
    - name: Load lab_name_mapping (vars/lab_name_mapping.yml)
      include_vars:
        file: vars/lab_name_mapping.yml
      register: _lnm1
      failed_when: false
      ignore_errors: true
      when: lab_name_mapping is not defined

    - name: Load lab_name_mapping (../vars/lab_name_mapping.yml)
      include_vars:
        file: ../vars/lab_name_mapping.yml
      register: _lnm2
      failed_when: false
      ignore_errors: true
      when: lab_name_mapping is not defined

    - name: Load lab_name_mapping (lab_name_mapping.yml at cwd)
      include_vars:
        file: lab_name_mapping.yml
      register: _lnm3
      failed_when: false
      ignore_errors: true
      when: lab_name_mapping is not defined

    - name: Fail if lab_name_mapping not loaded
      fail:
        msg: "Could not load 'lab_name_mapping'. Ensure vars/lab_name_mapping.yml (or ../vars/…, ./) defines 'lab_name_mapping: {...}'."
      when: lab_name_mapping is not defined

    # --- Load lab_interfaces_mapping.yml ---
    - name: Load lab_interfaces_mapping (vars/lab_interfaces_mapping.yml)
      include_vars:
        file: vars/lab_interfaces_mapping.yml
      register: _lim1
      failed_when: false
      ignore_errors: true
      when: lab_interfaces_mapping is not defined

    - name: Load lab_interfaces_mapping (../vars/lab_interfaces_mapping.yml)
      include_vars:
        file: ../vars/lab_interfaces_mapping.yml
      register: _lim2
      failed_when: false
      ignore_errors: true
      when: lab_interfaces_mapping is not defined

    - name: Load lab_interfaces_mapping (lab_interfaces_mapping.yml at cwd)
      include_vars:
        file: lab_interfaces_mapping.yml
      register: _lim3
      failed_when: false
      ignore_errors: true
      when: lab_interfaces_mapping is not defined

    - name: Fail if lab_interfaces_mapping not loaded
      fail:
        msg: "Could not load 'lab_interfaces_mapping'. Ensure vars/lab_interfaces_mapping.yml (or ../vars/…, ./) defines 'lab_interfaces_mapping: {...}'."
      when: lab_interfaces_mapping is not defined

    # Prefer 'port_state'; accept legacy 'action' too (but don't use reserved var internally)
    - name: Determine effective port_state
      set_fact:
        port_state_effective: "{{ port_state | default(action | default('')) }}"

    - name: Validate port_state (enable|disable)
      assert:
        that:
          - "port_state_effective in ['enable', 'disable']"
        fail_msg: "Invalid port state '{{ port_state_effective }}'. Use 'enable' or 'disable'."

    # Find the switch that hosts the requested room (case-insensitive)
    - name: Locate switch for given room
      set_fact:
        switch_name: "{{ item.key }}"
      loop: "{{ switch_mapping | dict2items }}"
      when:
        - room is defined
        - room | length > 0
        - (room | lower) in (item.value | map('lower') | list)

    - name: Fail if no switch matches the room
      fail:
        msg: "Room '{{ room }}' not found in switch_mapping."
      when: switch_name is not defined

    # Resolve lab name from the room (tolerate hyphen/underscore/case)
    - name: Build case-insensitive room→lab map
      set_fact:
        lab_name_mapping_ci: "{{ lab_name_mapping_ci | default({}) | combine({ (item.key | lower): item.value }) }}"
      loop: "{{ lab_name_mapping | dict2items }}"

    - name: Resolve lab name for this room
      set_fact:
        resolved_lab_name: >-
          {{
            lab_name_mapping.get(room)
            | default(lab_name_mapping.get(room | replace('-', '_')))
            | default(lab_name_mapping.get(room | replace('_', '-')))
            | default(lab_name_mapping_ci[room | lower] | default(omit))
          }}

    - name: Fail if lab name not found for room
      fail:
        msg: "Room '{{ room }}' not mapped to a lab in lab_name_mapping."
      when: resolved_lab_name is not defined

    # Fetch the lab's interface tokens (supports lab_37 / lab-37)
    - name: Normalize lab key variants
      set_fact:
        _lab_key_1: "{{ resolved_lab_name }}"
        _lab_key_2: "{{ resolved_lab_name | replace('-', '_') }}"
        _lab_key_3: "{{ resolved_lab_name | replace('_', '-') }}"

    - name: Fetch lab interface tokens
      set_fact:
        lab_entry: >-
          {{
            lab_interfaces_mapping.get(_lab_key_1)
            | default(lab_interfaces_mapping.get(_lab_key_2))
            | default(lab_interfaces_mapping.get(_lab_key_3))
          }}

    - name: Fail if lab key not found in lab_interfaces_mapping
      fail:
        msg: "Lab '{{ resolved_lab_name }}' not found in lab_interfaces_mapping."
      when: lab_entry is not defined

    - name: Canonicalize tokens to list
      set_fact:
        lab_raw_list: "{{ [lab_entry] if (lab_entry is string) else lab_entry }}"

    # Build final interface list (commas, ranges, singles) — robust, no backrefs, no range math errors
    - name: Init accumulator
      set_fact:
        interfaces_expanded: []

    # A) Expand comma-separated tokens: "2/10 , 2/11"
    - name: Expand comma tokens
      set_fact:
        interfaces_expanded: "{{ interfaces_expanded + ((token).split(',') | map('trim') | list) }}"
      vars:
        token: "{{ item | string }}"
      loop: "{{ lab_raw_list }}"
      when: "(item | string) is search(',')"

    # B) Expand range tokens using Ansible's sequence lookup (safe): "2/8-2/29"
    - name: Expand range tokens
      set_fact:
        interfaces_expanded: >-
          {{
            interfaces_expanded
            + (
                lookup('ansible.builtin.sequence',
                       'start=' ~ (start_num | string) ~ ' end=' ~ (end_num | string))
                | map('regex_replace', '^', prefix ~ '/')
                | list
              )
          }}
      vars:
        token: "{{ item | string }}"
        prefix: "{{ (token.split('-')[0] | trim).rsplit('/',1)[0] }}"
        start_num: "{{ ((token.split('-')[0] | trim).rsplit('/',1)[1]) | int }}"
        end_num: "{{ ((token.split('-')[1] | trim).rsplit('/',1)[1]) | int }}"
      loop: "{{ lab_raw_list }}"
      when:
        - "(item | string) is search('-')"
        - "(item | string) is not search(',')"

    # C) Add single-port tokens: "2/7"
    - name: Add single port tokens
      set_fact:
        interfaces_expanded: "{{ interfaces_expanded + [ (item | string) | trim ] }}"
      loop: "{{ lab_raw_list }}"
      when:
        - "(item | string) is not search(',')"
        - "(item | string) is not search('-')"

    - name: Deduplicate & clean blanks
      set_fact:
        lab_interfaces: "{{ interfaces_expanded | reject('equalto','') | unique | list }}"

    - name: Ensure we have interfaces
      fail:
        msg: "No interfaces parsed for lab '{{ resolved_lab_name }}'. Check lab_interfaces_mapping."
      when: lab_interfaces | length == 0

    # Hand off to the switch host
    - name: Add resolved switch as target host
      add_host:
        name: "{{ switch_name }}"
        groups: lab_switch
        lab_interfaces: "{{ lab_interfaces }}"
        lab_port_state: "{{ port_state_effective }}"
        resolved_lab_name: "{{ resolved_lab_name }}"

# Play 2: Apply enable/disable on each interface of the resolved switch
- name: Apply bulk interface state on ArubaOS-Switch
  hosts: lab_switch
  gather_facts: false
  connection: network_cli
  vars:
    ansible_network_os: community.network.aruba
  collections:
    - community.network

  tasks:
    - name: Plan summary
      debug:
        msg:
          - "Switch: {{ inventory_hostname }}"
          - "Lab: {{ resolved_lab_name }}"
          - "State: {{ lab_port_state }}"
          - "Interfaces: {{ lab_interfaces | join(', ') }}"

    - name: Apply {{ lab_port_state }} on each lab interface
      community.network.aruba_config:
        parents: "interface {{ item }}"
        lines:
          - "{{ lab_port_state }}"
      loop: "{{ lab_interfaces }}"

    - name: Save configuration
      community.network.aruba_command:
        commands:
          - "write memory"

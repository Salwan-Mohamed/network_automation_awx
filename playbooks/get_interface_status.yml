---
# Play 1: Resolve the switch from the room and pass target interface(s)
- name: Resolve switch from room and prepare targets
  hosts: localhost
  gather_facts: false

  # Load switch mapping; adjust the paths if your repo layout differs.
  tasks:
    - name: Load switch_mapping (vars/switch_mapping.yml)
      include_vars:
        file: vars/switch_mapping.yml
      register: _sw1
      failed_when: false
      ignore_errors: true
      when: switch_mapping is not defined

    - name: Load switch_mapping (../vars/switch_mapping.yml)
      include_vars:
        file: ../vars/switch_mapping.yml
      register: _sw2
      failed_when: false
      ignore_errors: true
      when: switch_mapping is not defined

    - name: Load switch_mapping (switch_mapping.yml at cwd)
      include_vars:
        file: switch_mapping.yml
      register: _sw3
      failed_when: false
      ignore_errors: true
      when: switch_mapping is not defined

    - name: Fail if switch_mapping not loaded
      fail:
        msg: "Could not load 'switch_mapping'. Ensure it defines 'switch_mapping: { switch: [rooms...] }'."
      when: switch_mapping is not defined

    - name: Ensure we got a room and a port_number
      assert:
        that:
          - room is defined
          - (room | string) | length > 0
          - port_number is defined
          - (port_number | string) | length > 0
        fail_msg: "Provide 'room' and 'port_number' (e.g., room: n-g-36, port_number: '1/20')."

    - name: Locate switch for given room (case-insensitive)
      set_fact:
        switch_name: "{{ item.key }}"
      loop: "{{ switch_mapping | dict2items }}"
      when: (room | lower) in (item.value | map('lower') | list)

    - name: Fail if no switch matches the room
      fail:
        msg: "Room '{{ room }}' not found in switch_mapping."
      when: switch_name is not defined

    - name: Build target interface list
      set_fact:
        target_interfaces: ["{{ port_number | string }}"]

    - name: Add resolved switch as a host for Play 2
      add_host:
        name: "{{ switch_name }}"
        groups: target_switch
        target_interfaces: "{{ target_interfaces }}"

# Play 2: Connect to the switch and fetch interface info
- name: Fetch interface status / enabled / name (ArubaOS-Switch)
  hosts: target_switch
  gather_facts: false
  connection: network_cli
  vars:
    ansible_network_os: community.network.aruba
  collections:
    - community.network

  tasks:
    - name: Initialize result list
      set_fact:
        interfaces_info: []

    # Run BOTH show commands per interface in a single task (looped by interface).
    - name: Collect show outputs per interface
      community.network.aruba_command:
        commands:
          - "show interface {{ item }}"
          - "show running-config interface {{ item }}"
      loop: "{{ target_interfaces }}"
      register: show_outputs

    # Build structured records from the collected outputs
    - name: Parse and accumulate results
      set_fact:
        interfaces_info: >-
          {{
            interfaces_info + [ {
              'interface': res.item,
              'link_status': (
                 (res.stdout[0] | regex_findall('Link\\s+Status\\s*:\\s*(\\w+)') | first)
                 | default('Unknown')
                 | trim
              ),
              'port_enabled': (
                 (res.stdout[0] | regex_findall('Port\\s+Enabled\\s*:\\s*(\\w+)') | first)
                 | default('Unknown')
                 | trim
              ),
              'name': (
                 ((res.stdout[1] | regex_findall('name\\s+\\"(.*)\\"')) | first | default('') | trim)
                 | default((res.stdout[0] | regex_findall('Name\\s*:\\s*(.*)') | first | default('')) | trim)
              )
            } ]
          }}
      loop: "{{ show_outputs.results }}"
      loop_control:
        loop_var: res
        label: "{{ res.item }}"

    - name: Summary (per interface)
      debug:
        msg: >-
          Interface {{ item.interface }} |
          Link Status: {{ item.link_status }} |
          Port Enabled: {{ item.port_enabled }} |
          Name: {{ item.name }}
      loop: "{{ interfaces_info }}"
      loop_control:
        label: "{{ item.interface }}"

    # If you prefer raw JSON for an external system, uncomment this:
    # - name: Raw JSON result
    #   debug:
    #     var: interfaces_info

---
# Play 1: Resolve target switch & port + build final interface name
- name: Resolve Switch Based on Room Number and Convert Wall Point
  hosts: localhost
  gather_facts: false
  vars_files:
    - ../vars/switch_mapping.yml
    - ../vars/interface_name.yml
    - ../vars/vlan_mapping.yml
    - ../vars/wall_point_mapping.yml

  tasks:
    - name: Find Switch for Given Room
      set_fact:
        switch_name: "{{ item.key }}"
      loop: "{{ switch_mapping | dict2items }}"
      when:
        - room is defined
        - room | length > 0
        - (room | lower) in (item.value | map('lower') | list)

    - name: Fail if No Matching Switch is Found
      fail:
        msg: "No switch found for room {{ room }}. Check switch_mapping.yml"
      when: switch_name is not defined

    - name: Convert wall point label to actual switch port (if mapping exists)
      set_fact:
        actual_port_number: "{{ wall_point_mapping[port_number] }}"
      when:
        - port_number is defined
        - port_number in wall_point_mapping

    - name: Use direct port number if not in wall point mapping
      set_fact:
        actual_port_number: "{{ port_number }}"
      when:
        - port_number is defined
        - port_number not in wall_point_mapping

    - name: Fail if Port Number Not Provided
      fail:
        msg: "Port number is required"
      when: actual_port_number is not defined or (actual_port_number | string) == ""

    # Base label from table, else fallback
    - name: Compute base interface label
      set_fact:
        interface_base_label: >-
          {{
            interface_descriptions.get(
              room,
              'Port_' ~ (room | string) ~ '_WP' ~ (port_number | string)
            )
            if room is defined and room is not none and (room | string) | length > 0
            else 'Port_WP' ~ (port_number | string)
          }}

    # Build device suffix(es) from survey device_name / second_device_name, or fall back to device_type vars
    - name: Build device label suffix list
      set_fact:
        device_label_1: "{{ (device_name | default(ansible_device_type | default('')) | string) | trim | lower }}"
        device_label_2: "{{ (second_device_name | default(ansible_second_device_type | default('')) | string) | trim | lower }}"
        device_suffix_list: >-
          {{
            ([device_label_1] if device_label_1 not in ['','none'] else [])
            + ([device_label_2] if device_label_2 not in ['','none'] else [])
          }}

    - name: Build final interface description with device suffixes
      set_fact:
        interface_description_final: >-
          {{
            interface_base_label
          }}{{ '_' ~ (device_suffix_list | join('_')) if (device_suffix_list | length) > 0 else '' }}

    - name: Add Resolved Switch to Inventory
      add_host:
        name: "{{ switch_name }}"
        groups: dynamic_switches
        ansible_port_number: "{{ actual_port_number }}"
        interface_description: "{{ interface_description_final }}"
        ansible_device_type: "{{ device_type | default('none') }}"
        ansible_second_device_type: "{{ second_device_type | default('none') }}"
        # If your inventory lacks the host/IP for switch_name, you can add:
        # ansible_host: "{{ switch_ip_mapping[switch_name] }}"

# Play 2: Configure the ArubaOS-Switch interface
- name: Configure Aruba Switch Port Based on Device Type and Configuration Cases
  hosts: dynamic_switches
  gather_facts: false
  connection: network_cli
  vars:
    ansible_network_os: community.network.aruba
    cleanup_strategy: wipe    # wipe | safe  (applies to Case 1 & 2 VLAN cleanup)
  collections:
    - community.network
  vars_files:
    - ../vars/vlan_mapping.yml

  tasks:
    - name: Debug (switch/port/input)
      debug:
        msg:
          - "Switch: {{ inventory_hostname }}"
          - "Port: {{ ansible_port_number }}"
          - "Interface Final Description: {{ interface_description }}"
          - "Primary Device Type: {{ ansible_device_type }}"
          - "Second Device Type: {{ ansible_second_device_type }}"

    ###########################################################################
    # CASE 1: Phone only (tagged = phone VLAN)
    ###########################################################################
    - name: CASE 1 | Read current interface config
      community.network.aruba_command:
        commands:
          - "show running-config interface {{ ansible_port_number }}"
      register: c1_iface_cmd
      when: ansible_device_type == "phone"

    - name: CASE 1 | Extract interface text
      set_fact:
        c1_text: "{{ (c1_iface_cmd.stdout[0] | default('')) | lower }}"
      when: ansible_device_type == "phone"

    - name: CASE 1 | Parse existing VLAN membership
      set_fact:
        c1_old_untagged: "{{ c1_text | regex_findall('untagged\\s+vlan\\s+(\\d+)') | unique }}"
        c1_old_tagged:   "{{ c1_text | regex_findall('tagged\\s+vlan\\s+(\\d+)') | unique }}"
        c1_desired_untagged: []
        c1_desired_tagged: ["{{ vlan_mapping.phone | string }}"]
      when: ansible_device_type == "phone"

    - name: CASE 1 | Compute removal lists
      set_fact:
        c1_remove_untagged: >-
          {{ c1_old_untagged
             if cleanup_strategy == 'wipe'
             else (c1_old_untagged | map('string') | list) | difference(c1_desired_untagged) }}
        c1_remove_tagged: >-
          {{ c1_old_tagged
             if cleanup_strategy == 'wipe'
             else (c1_old_tagged | map('string') | list) | difference(c1_desired_tagged) }}
      when: ansible_device_type == "phone"

    - name: CASE 1 | Remove old UNTAGGED VLAN(s)
      community.network.aruba_config:
        parents: "interface {{ ansible_port_number }}"
        lines:
          - "no untagged vlan {{ item }}"
      loop: "{{ c1_remove_untagged | default([]) }}"
      when:
        - ansible_device_type == "phone"
        - (c1_remove_untagged | default([])) | length > 0

    - name: CASE 1 | Remove old TAGGED VLAN(s)
      community.network.aruba_config:
        parents: "interface {{ ansible_port_number }}"
        lines:
          - "no tagged vlan {{ item }}"
      loop: "{{ c1_remove_tagged | default([]) }}"
      when:
        - ansible_device_type == "phone"
        - (c1_remove_tagged | default([])) | length > 0

    - name: CASE 1 | Apply phone-only interface config
      community.network.aruba_config:
        parents: "interface {{ ansible_port_number }}"
        lines:
          - "name {{ interface_description | quote }}"
          - "tagged vlan {{ vlan_mapping.phone }}"
          - "speed-duplex auto"
          - "enable"
      when: ansible_device_type == "phone"

    - name: CASE 1 | Port security (GLOBAL/parent)
      community.network.aruba_config:
        lines:
          - "port-security {{ ansible_port_number }} learn-mode static"
          - "port-security {{ ansible_port_number }} address-limit 1"
          - "port-security {{ ansible_port_number }} action send-disable"
      when: ansible_device_type == "phone"

    ###########################################################################
    # CASE 2: Non-phone device only (untagged = device VLAN)
    ###########################################################################
    - name: CASE 2 | Read current interface config
      community.network.aruba_command:
        commands:
          - "show running-config interface {{ ansible_port_number }}"
      register: c2_iface_cmd
      when:
        - ansible_device_type != "phone"
        - ansible_device_type != "none"
        - ansible_second_device_type == "none"

    - name: CASE 2 | Extract interface text
      set_fact:
        c2_text: "{{ (c2_iface_cmd.stdout[0] | default('')) | lower }}"
      when:
        - ansible_device_type != "phone"
        - ansible_device_type != "none"
        - ansible_second_device_type == "none"

    - name: CASE 2 | Parse existing VLAN membership
      set_fact:
        c2_old_untagged: "{{ c2_text | regex_findall('untagged\\s+vlan\\s+(\\d+)') | unique }}"
        c2_old_tagged:   "{{ c2_text | regex_findall('tagged\\s+vlan\\s+(\\d+)') | unique }}"
        c2_desired_untagged: ["{{ vlan_mapping[ansible_device_type] | string }}"]
        c2_desired_tagged: []
      when:
        - ansible_device_type != "phone"
        - ansible_device_type != "none"
        - ansible_second_device_type == "none"

    - name: CASE 2 | Compute removal lists
      set_fact:
        c2_remove_untagged: >-
          {{ c2_old_untagged
             if cleanup_strategy == 'wipe'
             else (c2_old_untagged | map('string') | list) | difference(c2_desired_untagged) }}
        c2_remove_tagged: >-
          {{ c2_old_tagged
             if cleanup_strategy == 'wipe'
             else (c2_old_tagged | map('string') | list) | difference(c2_desired_tagged) }}
      when:
        - ansible_device_type != "phone"
        - ansible_device_type != "none"
        - ansible_second_device_type == "none"

    - name: CASE 2 | Remove old UNTAGGED VLAN(s)
      community.network.aruba_config:
        parents: "interface {{ ansible_port_number }}"
        lines:
          - "no untagged vlan {{ item }}"
      loop: "{{ c2_remove_untagged | default([]) }}"
      when:
        - (c2_remove_untagged | default([])) | length > 0
        - ansible_device_type != "phone"
        - ansible_device_type != "none"
        - ansible_second_device_type == "none"

    - name: CASE 2 | Remove old TAGGED VLAN(s)
      community.network.aruba_config:
        parents: "interface {{ ansible_port_number }}"
        lines:
          - "no tagged vlan {{ item }}"
      loop: "{{ c2_remove_tagged | default([]) }}"
      when:
        - (c2_remove_tagged | default([])) | length > 0
        - ansible_device_type != "phone"
        - ansible_device_type != "none"
        - ansible_second_device_type == "none"

    - name: CASE 2 | Apply non-phone interface config
      community.network.aruba_config:
        parents: "interface {{ ansible_port_number }}"
        lines:
          - "name {{ interface_description | quote }}"
          - "untagged vlan {{ vlan_mapping[ansible_device_type] }}"
          - "speed-duplex auto"
          - "enable"
      when:
        - ansible_device_type != "phone"
        - ansible_device_type != "none"
        - ansible_second_device_type == "none"

    - name: CASE 2 | Port security (GLOBAL/parent)
      community.network.aruba_config:
        lines:
          - "port-security {{ ansible_port_number }} learn-mode static"
          - "port-security {{ ansible_port_number }} address-limit 1"
          - "port-security {{ ansible_port_number }} action send-disable"
      when:
        - ansible_device_type != "phone"
        - ansible_device_type != "none"
        - ansible_second_device_type == "none"

    ###########################################################################
    # CASE 3: Device + Phone (untagged = device VLAN, tagged = phone VLAN)
    ###########################################################################
    - name: CASE 3 | Device with phone | Apply config
      when: ansible_second_device_type == "phone"
      block:
        - name: CASE 3 | Apply interface config
          community.network.aruba_config:
            parents: "interface {{ ansible_port_number }}"
            lines:
              - "name {{ interface_description | quote }}"
              - "untagged vlan {{ vlan_mapping[ansible_device_type] }}"
              - "tagged vlan {{ vlan_mapping.phone }}"
              - "speed-duplex auto"
              - "enable"

        - name: CASE 3 | Port security (GLOBAL/parent; allow 2)
          community.network.aruba_config:
            lines:
              - "port-security {{ ansible_port_number }} learn-mode static"
              - "port-security {{ ansible_port_number }} address-limit 2"
              - "port-security {{ ansible_port_number }} action send-disable"

    ###########################################################################
    # CASE 4: None (admin down)
    ###########################################################################
    - name: CASE 4 | None device | Apply config
      when:
        - ansible_device_type == "none"
        - ansible_second_device_type == "none"
      block:
        - name: CASE 4 | Apply interface config
          community.network.aruba_config:
            parents: "interface {{ ansible_port_number }}"
            lines:
              - "name {{ interface_description | quote }}"
              - "speed-duplex auto"
              - "disable"

        - name: CASE 4 | Port security (GLOBAL/parent; keep 1)
          community.network.aruba_config:
            lines:
              - "port-security {{ ansible_port_number }} learn-mode static"
              - "port-security {{ ansible_port_number }} address-limit 1"
              - "port-security {{ ansible_port_number }} action send-disable"

    - name: Save configuration
      community.network.aruba_command:
        commands:
          - "write memory"
